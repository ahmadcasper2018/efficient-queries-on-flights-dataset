import csv
import airline
import airport
import flight
airline_dict = {}
airport_dict = {}
date_dict = {}

# Process CSV File

try:
    with open('flights_info.csv', newline='') as csvfile:
        reader = csv.DictReader(csvfile)

        for row in reader:
            # define variables
            airline_code = str(row['AIRLINE'])
            airline_name = str(row['AIRLINE_NAME'])

            origin_airport_code = str(row['ORIGIN_AIRPORT'])
            origin_airport_name = str(row['ORIGIN_NAME'])
            origin_airport_city = str(row['ORIGIN_CITY'])
            origin_airport_state = str(row['ORIGIN_STATE'])

            dest_airport_code = str(row['DESTINATION_AIRPORT'])
            dest_airport_name = str(row['DESTINATION_NAME'])
            dest_airport_city = str(row['DESTINATION_CITY'])
            dest_airport_state = str(row['DESTINATION_STATE'])

            flight_year = str(row['YEAR'])
            flight_month = str(row['MONTH'])
            flight_day = str(row['DAY'])
            flight_num = str(row['FLIGHT_NUMBER'])
            flight_scheduled_departure = str(row['SCHEDULED_DEPARTURE'])
            flight_departure_time = str(row['DEPARTURE_TIME'])
            flight_departure_delay = str(row['DEPARTURE_DELAY'])
            flight_scheduled_arrival = str(row['SCHEDULED_ARRIVAL'])
            flight_arrival_time = str(row['ARRIVAL_TIME'])
            flight_arrival_delay = str(row['ARRIVAL_DELAY'])

            # if the airline is new, create a new airline object
            if not(airline_code in airline_dict):
                airline_dict[airline_code] = airline.Airline(
                    airline_code, airline_name)

            # if the origin airport is new, create a new airport object
            if not(origin_airport_code in airport_dict):
                airport_dict[origin_airport_code] = airport.Airport(
                    origin_airport_code, origin_airport_name, origin_airport_city, origin_airport_state)

            # if the destination airport is new, create a new airport object
            if not(dest_airport_code in airport_dict):
                airport_dict[dest_airport_code] = airport.Airport(
                    dest_airport_code, dest_airport_name, dest_airport_city, dest_airport_state)

            # create a new flight
            cur_flight = flight.Flight(flight_year, flight_month, flight_day, airline_dict[airline_code], flight_num, airport_dict[origin_airport_code], airport_dict[
                                       dest_airport_code], flight_scheduled_departure, flight_departure_time, flight_departure_delay, flight_scheduled_arrival, flight_arrival_time, flight_arrival_delay)

            # if the date is new, create a new date key
            flight_date = cur_flight.get_date()
            if not(flight_date in date_dict):
                date_dict[flight_date] = []

            # add the flight to date dictionary
            date_dict[flight_date].append(cur_flight)

            # add the flight to airline
            airline_dict[airline_code].add_flight(cur_flight)

            # add the flight to origin airport
            airport_dict[origin_airport_code].add_origin_flight(cur_flight)

            # add the flight to destination airport
            airport_dict[dest_airport_code].add_dest_flight(cur_flight)

except IOError:
    print("The file cannot be opened")


# Queries
def query1():
    # Process Query 1 here

    # Loop for each key in date_dict dictionary. The key here represents the date
    for key in date_dict.keys():
        print(key+':')

        # the value of date_dict[key] is list of flight instances in the date which is represented by key
        # then we store this value in thisDateFlights
        thisDateFlights = date_dict[key]

        # Storing all flights' arrival delay in arrivalDelays list
        arrivalDelays = [thisDateFlight.get_arrival_delay()
                         for thisDateFlight in thisDateFlights]

        # The max value in arrivalDelays list is the longest delay
        longest_arrival_delay = max(arrivalDelays)

        # Print All flight tuples ,which generated by __repr__, that have the longest delay
        for thisDateFlight in thisDateFlights:
            this_arrival_delay = thisDateFlight.get_arrival_delay()
            if this_arrival_delay == longest_arrival_delay:
                print(thisDateFlight.__repr__())


def query2():
    # Process Query 2 here

    # Sorting Keys in airport_dict dictionary by Airports codes
    tkeys = airport_dict.keys()
    keys = list(tkeys)
    keys.sort(key=lambda x: airport_dict[x].get_code())

    # Loop for each key in airport_dict
    for key in keys:
        # The value of airport_dict[key] is airport instance
        Airport = airport_dict[key]

        # Print airport tuple generated by __repr__
        print(Airport.__repr__())

        Origin_Flights = Airport.get_origin_flights()
        Dest_Flights = Airport.get_dest_flights()

        num_of_origin_delays, num_of_dest_delays = 0, 0

        # Finding the number of origin flights with departure delays more than 15 minutes
        for Flight in Origin_Flights:
            if Flight.get_departure_delay() > 15:
                num_of_origin_delays += 1

        # Finding the number of destination flights with arrival delays more than 15 minutes
        for Flight in Dest_Flights:
            if Flight.get_arrival_delay() > 15:
                num_of_dest_delays += 1

        print("origin delays:", num_of_origin_delays)
        print("destination delays:", num_of_dest_delays)


def query3():
    # Process Query 3 here

    # Sorting Keys in airline_dict dictionary by Airlines' names
    tkeys = airline_dict.keys()
    keys = list(tkeys)
    keys.sort(key=lambda x: airline_dict[x].get_name())

    # Loop for each key in airline_dict
    for key in keys:
        # The value of airline_dict[key] is airline instance
        Airline = airline_dict[key]

        # Printing airline name
        print(Airline.get_name())

        # Flights list contains all this Airline flights
        Flights = Airline.get_flights()

        # -The Following dictionary will help us to connect
        # the date with all information we need of each flight on this date
        # -Key : Date
        # -value : [ [ORIGIN AIRPORT CODE, DESTINATION AIRPORT CODE, ARRIVAL DELAY] ,......]
        #           list of lists
        new_date_dict = {}

        # for loop in order to go through all the Flights
        # and pass the data we need to new_date_dict dictionary
        for Flight in Flights:

            Date = Flight.get_date()
            origin_Airport_Code = Flight.get_origin_airport().get_code()
            dest_Airport_Code = Flight.get_dest_airport().get_code()
            arrival_delay = Flight.get_arrival_delay()

            # if the Date is new, create a new Date key
            if not (Date in new_date_dict):
                new_date_dict[Date] = []
            new_date_dict[Date].append(
                [origin_Airport_Code, dest_Airport_Code, arrival_delay])

        # for each date:
        #       print date
        #       then proccess the flights data of this specific airline in this specific date
        #       print the result
        for newDateKey in new_date_dict.keys():

            # Print the date
            print(newDateKey)

            # The following dictionary will help us to determine
            # the number of flights per day in chronological order from (origin, dest)
            # Key:  'OOO DDD' for example 'FLG PHX' is Key
            # value: tuple
            #           in this tuple:
            #               - number of even index is equal to the number of flights
            #               - each odd index represents if flight
            #                    which were within 15 minutes of their scheduled time.
            origin_dest_dict = {}

            for value in new_date_dict[newDateKey]:
                # Generate the str_key
                str_key = str(value[0]) + ' ' + str(value[1])

                # Succeed represents if flight
                #       were within 15 minutes of their scheduled time 'true' or not 'false'
                Succeed = (value[2] <= 15)

                # if the key is new, create a new key
                if not (str_key in origin_dest_dict):
                    origin_dest_dict[str_key] = ()
                origin_dest_dict[str_key] += ((1, Succeed))

            # Sorting Keys in origin_dest_dict dictionary by (origin, dest)
            originDestDict_Keys = list(origin_dest_dict.keys())
            originDestDict_Keys.sort()

            for v_key in originDestDict_Keys:
                tmpValue = origin_dest_dict[v_key]

                All = len(tmpValue) // 2

                ans = 0
                for i in range(1, len(tmpValue), 2):
                    if tmpValue[i] == True:
                        ans += 1

                print(v_key, All, str(round(ans/All * 100)) + "%")


 # Input Output Testing - DO NOT MODIFY ANYTHING BELOW THIS LINE
testcase = input()
print(testcase)
if testcase == 'testcase 1':
    # Tests classes are created correctly
    airport1 = airport.Airport(
        'PHX', 'Phoenix Sky Harbor International Airport', 'Phoenix', 'AZ')
    airport2 = airport.Airport(
        'LAS', 'McCarran International Airport', 'Las Vegas', 'NV')
    airline1 = airline.Airline('WN', 'Southwest Airlines Co.')
    flight1 = flight.Flight(2021, 2, 16, airline1, '240',
                            airport1, airport2, 1230, 1235, 5, 215, 225, 10)
    airport1.add_origin_flight(flight1)
    airport2.add_dest_flight(flight1)
    airline1.add_flight(flight1)
    # Repr Functions
    print(airport1, airport2, airline1, flight1, sep='\n')
    # Airline Getter Functions
    print(airline1.get_code(), airline1.get_name(), airline1.get_flights())
    # Airport Getter Functions
    print(airport1.get_code(), airport1.get_name(), airport1.get_city(
    ), airport1.get_state(), airport1.get_origin_flights(), airport2.get_dest_flights())
    # Flight Getter Functions
    print(flight1.get_date(), flight1.get_year(), flight1.get_month(), flight1.get_day(), flight1.get_airline(), flight1.get_flight_num(), flight1.get_origin_airport(), flight1.get_dest_airport(
    ), flight1.get_scheduled_departure(), flight1.get_departure_time(), flight1.get_departure_delay(), flight1.get_scheduled_arrival(), flight1.get_arrival_time(), flight1.get_arrival_delay())
elif testcase == 'testcase 2':
    print(airline_dict)
    print(airport_dict)
    print(date_dict['2015-01-10'])
elif testcase == 'testcase 3':
    query1()
elif testcase == 'testcase 4':
    query2()
elif testcase == 'testcase 5':
    query3()
